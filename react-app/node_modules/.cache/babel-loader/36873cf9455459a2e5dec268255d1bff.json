{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\kubicjir\\\\source\\\\repos\\\\ASP.NET CORE\\\\react-app\\\\src\\\\components\\\\CustomerForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, TextField, withStyles, Button } from \"@material-ui/core\";\nimport useForm from \"./useForm\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/customer\";\n\nconst styles = theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      minWidth: 230\n    }\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n    minWidth: 80\n  }\n});\n\nconst initialFieldValues = {\n  id: '',\n  fullName: '',\n  address: '',\n  email: '',\n  age: '',\n  mobil: ''\n};\n\nconst CustomerForm = ({\n  classes,\n  ...props\n}) => {\n  _s();\n\n  const validate = (fieldValues = values) => {\n    let temp = { ...errors\n    };\n    if ('id' in fieldValues) temp.id = fieldValues.id ? \"\" : \"This field is required.\";\n    if ('fullName' in fieldValues) temp.fullName = fieldValues.fullName ? \"\" : \"This field is required.\";\n    if ('address' in fieldValues) temp.address = fieldValues.address ? \"\" : \"This field is required.\";\n    if ('email' in fieldValues) temp.email = /^$|.+@.+..+/.test(fieldValues.email) ? \"\" : \"Email is not valid.\";\n    setErrors({ ...temp\n    });\n    if (fieldValues == values) return Object.values(temp).every(x => x == \"\");\n  };\n\n  const {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange,\n    resetForm\n  } = useForm(initialFieldValues, validate, props.setCurrentId);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (validate()) {\n      if (props.currentId == 0) props.createCustomer(values, () => {\n        window.alert('inserted');\n      });else props.updateCustomer(props.currentId, values, () => {\n        window.alert('updated');\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (props.currentId != 0) {\n      setValues({ ...props.customerList.find(x => x.id == props.currentId)\n      });\n      setErrors({});\n    }\n  }, [props.currentId]);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    autoComplete: \"off\",\n    noValidate: true,\n    className: classes.root,\n    onSubmit: handleSubmit,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          name: \"id\",\n          variant: \"outlined\",\n          label: \"Id\",\n          value: values.id,\n          onChange: handleInputChange,\n          ...(errors.id && {\n            error: true,\n            helperText: errors.id\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          name: \"fullName\",\n          variant: \"outlined\",\n          label: \"Full Name\",\n          value: values.fullName,\n          onChange: handleInputChange,\n          ...(errors.fullName && {\n            error: true,\n            helperText: errors.fullName\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          name: \"address\",\n          variant: \"outlined\",\n          label: \"Address\",\n          value: values.address,\n          onChange: handleInputChange,\n          ...(errors.address && {\n            error: true,\n            helperText: errors.address\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          name: \"email\",\n          variant: \"outlined\",\n          label: \"Email\",\n          value: values.email,\n          onChange: handleInputChange,\n          ...(errors.email && {\n            error: true,\n            helperText: errors.email\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          name: \"age\",\n          variant: \"outlined\",\n          label: \"Age\",\n          value: values.age,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          name: \"mobil\",\n          variant: \"outlined\",\n          label: \"Mobil\",\n          value: values.mobil,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            type: \"submit\",\n            className: classes.smMargin,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 49\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            className: classes.smMargin,\n            onClick: resetForm,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 49\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 17\n  }, this);\n};\n\n_s(CustomerForm, \"Qhuast2rK+I0DbMkc2PsnX7Fhno=\", false, function () {\n  return [useForm];\n});\n\n_c = CustomerForm;\n\nconst mapStateToProps = state => ({\n  customerList: state.customer.list\n});\n\nconst mapActionToProps = {\n  createCustomer: actions.create,\n  updateCustomer: actions.update\n};\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(CustomerForm));\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomerForm\");","map":{"version":3,"sources":["C:/Users/kubicjir/source/repos/ASP.NET CORE/react-app/src/components/CustomerForm.js"],"names":["React","useState","useEffect","Grid","TextField","withStyles","Button","useForm","connect","actions","styles","theme","root","margin","spacing","minWidth","smMargin","initialFieldValues","id","fullName","address","email","age","mobil","CustomerForm","classes","props","validate","fieldValues","values","temp","errors","test","setErrors","Object","every","x","setValues","handleInputChange","resetForm","setCurrentId","handleSubmit","e","preventDefault","currentId","createCustomer","window","alert","updateCustomer","customerList","find","error","helperText","mapStateToProps","state","customer","list","mapActionToProps","create","update"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Grid, TextField, withStyles, Button } from \"@material-ui/core\";\r\nimport useForm from \"./useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/customer\";\r\n\r\n\r\nconst styles = theme => ({\r\n        root: {\r\n                \"& .MuiTextField-root\": {\r\n                        margin: theme.spacing(1),\r\n                        minWidth: 230\r\n                }\r\n        },\r\n        smMargin: {\r\n                margin: theme.spacing(1),\r\n                minWidth: 80\r\n        }\r\n})\r\n\r\nconst initialFieldValues = {\r\n        id: '',\r\n        fullName: '',\r\n        address: '',\r\n        email: '',\r\n        age: '',\r\n        mobil: ''\r\n}\r\n\r\nconst CustomerForm = ({ classes, ...props }) => {\r\n\r\n        const validate = (fieldValues = values) => {\r\n                let temp = {...errors}\r\n                if ('id' in fieldValues)\r\n                        temp.id = fieldValues.id ? \"\" : \"This field is required.\"\r\n                if ('fullName' in fieldValues)\r\n                        temp.fullName = fieldValues.fullName ? \"\" : \"This field is required.\"\r\n                if ('address' in fieldValues)\r\n                        temp.address = fieldValues.address ? \"\" : \"This field is required.\"\r\n                if ('email' in fieldValues)\r\n                        temp.email = (/^$|.+@.+..+/).test(fieldValues.email) ? \"\" : \"Email is not valid.\"\r\n                setErrors({\r\n                        ...temp\r\n                })\r\n\r\n                if (fieldValues == values)\r\n                        return Object.values(temp).every(x => x == \"\")\r\n        }\r\n\r\n        const {\r\n                values,\r\n                setValues,\r\n                errors,\r\n                setErrors,\r\n                handleInputChange,\r\n                resetForm\r\n        } = useForm(initialFieldValues, validate, props.setCurrentId)\r\n\r\n        const handleSubmit = e => {\r\n                e.preventDefault()\r\n                if (validate()) {\r\n                        if (props.currentId == 0)\r\n                                props.createCustomer(values, () => { window.alert('inserted') })\r\n                                                \r\n                        else                                \r\n                                props.updateCustomer(props.currentId, values, () => { window.alert('updated') })\r\n                }\r\n        }\r\n\r\n        useEffect(() => {\r\n                if (props.currentId != 0){\r\n                        setValues({\r\n                                ...props.customerList.find(x => x.id == props.currentId)\r\n                        })\r\n                        setErrors({})\r\n                }\r\n        }, [props.currentId])\r\n\r\n        return (\r\n                <form autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\r\n                        <Grid container>\r\n                                <Grid item xs={6}>\r\n                                        <TextField name=\"id\" variant=\"outlined\" label=\"Id\" value={values.id} onChange={handleInputChange} {...(errors.id && { error: true, helperText: errors.id })}></TextField>\r\n                                        <TextField name=\"fullName\" variant=\"outlined\" label=\"Full Name\" value={values.fullName} onChange={handleInputChange} {...(errors.fullName && { error: true, helperText: errors.fullName })}></TextField>\r\n                                        <TextField name=\"address\" variant=\"outlined\" label=\"Address\" value={values.address} onChange={handleInputChange} {...(errors.address && { error: true, helperText: errors.address })}></TextField>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                        <TextField name=\"email\" variant=\"outlined\" label=\"Email\" value={values.email} onChange={handleInputChange} {...(errors.email && { error: true, helperText: errors.email })}></TextField>\r\n                                        <TextField name=\"age\" variant=\"outlined\" label=\"Age\" value={values.age} onChange={handleInputChange}></TextField>\r\n                                        <TextField name=\"mobil\" variant=\"outlined\" label=\"Mobil\" value={values.mobil} onChange={handleInputChange}></TextField>\r\n                                        <div>\r\n                                                <Button variant=\"contained\" color=\"primary\" type=\"submit\" className={classes.smMargin}>Submit</Button>\r\n                                                <Button variant=\"contained\" className={classes.smMargin} onClick={resetForm}>Reset</Button>\r\n                                        </div>\r\n                                </Grid>\r\n                        </Grid>\r\n                </form>\r\n        );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n        customerList: state.customer.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n        createCustomer: actions.create,\r\n        updateCustomer: actions.update\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(CustomerForm));"]},"metadata":{},"sourceType":"module"}